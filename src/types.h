#ifndef TYPES_H
#define TYPES_H


#include <assert.h>
#include <stdint.h>



typedef uint64_t Bitboard;


enum Color {
    COLOR_WHITE,
    COLOR_BLACK,

    COLOR_COUNT
};
static_assert(COLOR_COUNT == 2U);


enum PieceType {
    PIECE_TYPE_PAWN,
    PIECE_TYPE_KNIGHT,
    PIECE_TYPE_BISHOP,
    PIECE_TYPE_ROOK,
    PIECE_TYPE_QUEEN,
    PIECE_TYPE_KING,

    PIECE_TYPE_COUNT
};
static_assert(PIECE_TYPE_COUNT == 6U);

enum Piece {
    PIECE_WHITE_PAWN,
    PIECE_WHITE_KNIGHT,
    PIECE_WHITE_BISHOP,
    PIECE_WHITE_ROOK,
    PIECE_WHITE_QUEEN,
    PIECE_WHITE_KING,

    PIECE_BLACK_PAWN,
    PIECE_BLACK_KNIGHT,
    PIECE_BLACK_BISHOP,
    PIECE_BLACK_ROOK,
    PIECE_BLACK_QUEEN,
    PIECE_BLACK_KING,

    PIECE_COUNT
};
static_assert(PIECE_COUNT == 12U);

enum CastlingRights {
    NO_CASTLING = 0,

    WHITE_00 = 1U,
    WHITE_000 = WHITE_00 << 1U,
    BLACK_00 = WHITE_00 << 2U,
    BLACK_000 = WHITE_00 << 3U,

    KING_SIDE = WHITE_00 | BLACK_00,
    QUEEN_SIDE = WHITE_000 | BLACK_000,
    WHITE_CASTLING = WHITE_00 | WHITE_000,
    BLACK_CASSTLING = BLACK_00 | BLACK_000,
    ANY_CASTLING = WHITE_00 | WHITE_000 | BLACK_00 | BLACK_000
};


enum Square {
    SQUARE_A1, SQUARE_B1, SQUARE_C1, SQUARE_D1, SQUARE_E1, SQUARE_F1, SQUARE_G1, SQUARE_H1,
    SQUARE_A2, SQUARE_B2, SQUARE_C2, SQUARE_D2, SQUARE_E2, SQUARE_F2, SQUARE_G2, SQUARE_H2,
    SQUARE_A3, SQUARE_B3, SQUARE_C3, SQUARE_D3, SQUARE_E3, SQUARE_F3, SQUARE_G3, SQUARE_H3,
    SQUARE_A4, SQUARE_B4, SQUARE_C4, SQUARE_D4, SQUARE_E4, SQUARE_F4, SQUARE_G4, SQUARE_H4,
    SQUARE_A5, SQUARE_B5, SQUARE_C5, SQUARE_D5, SQUARE_E5, SQUARE_F5, SQUARE_G5, SQUARE_H5,
    SQUARE_A6, SQUARE_B6, SQUARE_C6, SQUARE_D6, SQUARE_E6, SQUARE_F6, SQUARE_G6, SQUARE_H6,
    SQUARE_A7, SQUARE_B7, SQUARE_C7, SQUARE_D7, SQUARE_E7, SQUARE_F7, SQUARE_G7, SQUARE_H7,
    SQUARE_A8, SQUARE_B8, SQUARE_C8, SQUARE_D8, SQUARE_E8, SQUARE_F8, SQUARE_G8, SQUARE_H8,

    SQUARE_COUNT
};
static_assert(SQUARE_COUNT == 64U);

enum File {
    FILE_A,
    FILE_B,
    FILE_C,
    FILE_D,
    FILE_E,
    FILE_F,
    FILE_G,
    FILE_H,

    FILE_COUNT
};
static_assert(FILE_COUNT == 8U);

enum Rank {
    RANK_1,
    RANK_2,
    RANK_3,
    RANK_4,
    RANK_5,
    RANK_6,
    RANK_7,
    RANK_8,

    RANK_COUNT
};
static_assert(RANK_COUNT == 8U);

enum Direction {
    DIRECTION_NORTH = 8,
    DIRECTION_EAST = 1,
    DIRECTION_SOUTH = -DIRECTION_NORTH,
    DIRECTION_WEST = -DIRECTION_EAST
};



#endif /* TYPES_H */
